# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Enable vi mode
set -o vi

export EDITOR=vim
export PAGER=less

export PATH=/opt/local/lib/postgresql90/bin:/usr/local/bin:/usr/texbin:/Users/mcaldwell/Development/homebrew/bin:$PATH

# History preferences
HISTCONTROL=erasedups
HISTSIZE=10000
shopt -s histappend # append instead of overwrite history

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set current prompt
color_prompt=yes
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Python Site Packages shortcuts
export SPPATH=`python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"`
alias sp='pushd $SPPATH'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

export FLEX_HOME=/Users/mcaldwel/Development/flex/
export JAVA_HOME=/Library/Java/Home

# project location aliases
alias dotfiles='cd ~/Development/dotfiles'
alias fsdev='cd ~/Development/fieldscope_django_31may2011/FieldScope-Server/src/fieldscope'
alias fsflexdev='cd ~/Development/fieldscope_client_29sep2011/FieldScope-Client'
alias fsclientdev=fsflexdev

# Python package compilation on Mac
function pip() {
    env ARCHFLAGS="-arch i386 -arch x86_64" pip $@
}

# lazy aliases
#alias vi='vim'
alias ls='ls -G'
alias ll='ls -alhF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias tree='tree -C'
alias trls='tree -C | less -R'
alias mode='(set -o | grep emacs.*on >/dev/null 2>&1 && echo "emacs mode" || echo "vi mode")'
alias g='gnome-open'
alias df='df -h'
alias delpyc='find . -type f -name "*.pyc" -print0 | xargs -0 rm'

# ssh aliases
alias scpresume="rsync --partial --progress --rsh=ssh"

alias mercator='ssh mcaldwel@mercator.fieldscope.org'
alias ubuntu='ssh -i ~/.ssh/id_rsa2 ubuntu@ec2-174-129-73-124.compute-1.amazonaws.com'

# reset shell
alias cds='cd; clear'

# If xclip is installed set to copy to system clipboard by default
if [ -f /usr/bin/xclip ]; then
    alias xclip='/usr/bin/xclip -sel c'
fi

# git aliases
if [ -x ~/bin/hub ]; then
    alias git=hub
fi

# reload .bashrc
alias refresh='. ~/.bashrc'

# Source in user functions
if [ -f ~/.user_functions ]; then
    . ~/.user_functions
fi

# functions

#from http://unix.stackexchange.com/questions/13464/is-there-a-way-to-find-a-file-in-an-inverse-recursive-search
function upsearch() {
    slashes=${PWD//[^\/]/}
    directory="$PWD"
    for (( n=${#slashes}; n>0; --n ))
    do
        test -e "$directory/$1" && echo "$directory/$1" && return
        directory="$directory/.."
    done
}

function py() {
    virtual_env=$1
    shift
    . ~/Development/python_env/$virtual_env/bin/activate
    python $@
    deactivate
}

function mysql() {
	arg=$1
	if [ "$arg" = "start" ]; then
		sudo -u mysql /opt/local/lib/mysql5/bin/mysqld_safe &
	else
		if [ "$arg" = "stop" ]; then
			sudo -u mysql /opt/local/share/mysql5/mysql/mysql.server stop
		fi
	fi

}

function postgres() {
	arg=$1
	if [ "$arg" = "start" ]; then
		sudo -u postgres pg_ctl -D /opt/local/var/db/postgresql90 -l /opt/local/var/log/postgresql90/server.log start
	else
		if [ "$arg" = "stop" ]; then
			sudo -u postgres pg_ctl -D /opt/local/var/db/postgresql90 stop -s -m fast
		fi
	fi
}

function vi() {
    filename="${@: -1}" 
    fileext=`echo "$filename"|awk -F. '{print $NF}'`
    if [ "$fileext" = "py" ]; then
        # create ctags storage directory
        if [ ! -d ~/.ctags_storage ]; then
            mkdir ~/.ctags_storage
        fi 

        site_packages=`python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"`
        parent=`upsearch ".git"`
        pushd . > /dev/null
        cd $parent/..
        parent_clean=$PWD
        proj=${PWD##*/} 
        popd > /dev/null


        # build ctags
        export VIM_CTAGS_PROJECT_DIR=~/.ctags_storage/$proj
        echo "Indexing project..."
        ctags -R -o $VIM_CTAGS_PROJECT_DIR $site_packages 2>/dev/null
        ctags -R -a -o $VIM_CTAGS_PROJECT_DIR $parent_clean 2>/dev/null
    fi
    /Applications/MacVim.app/Contents/MacOS/Vim $@
}

function venv() {
	name=$1
	. ~/Development/python_env/$name/bin/activate
}

##
# Your previous /Users/mcaldwell/.bash_profile file was backed up as /Users/mcaldwell/.bash_profile.macports-saved_2012-09-06_at_11:00:18
##

# MacPorts Installer addition on 2012-09-06_at_11:00:18: adding an appropriate PATH variable for use with MacPorts.
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
# Finished adapting your PATH environment variable for use with MacPorts.

