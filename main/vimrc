" Vim mode
set nocompatible

" Add the virtualenv's site-packages to vim path
"py << EOF
"import os.path
"import sys
"import vim
"if 'VIRTUAL_ENV' in os.environ:
"    project_base_dir = os.environ['VIRTUAL_ENV']
"    sys.path.insert(0, project_base_dir)
"    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"    execfile(activate_this, dict(__file__=activate_this))
"EOF

" Customize leader
let mapleader = ','

" Hide buffers, don't close them
set hidden

" Initialize vundle plugin manager
let vundle_installed=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let vundle_installed=0
endif

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" begin: vundle plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fuzzy file search
Bundle 'kien/ctrlp.vim'
let g:ctrlp_map = '<leader>f'
" <F5> - refresh

" Easier navigation
Bundle 'Lokaltog/vim-easymotion'

" Git integration
Bundle 'tpope/vim-fugitive'

" Color-code test results
Bundle 'reinh/vim-makegreen'

" JSHint
" Bundle 'wookiehangover/jshint.vim'

" Bundle 'walm/jshint.vim'

" Comment helpers
Bundle 'scrooloose/nerdcommenter'

" File browsing
Bundle 'scrooloose/nerdtree'
let NERDTreeShowHidden=1         " show hidden files
map <C-d> :NERDTreeToggle<CR>
if argc() == 0                   " show nerdtree when vim is
    autocmd VimEnter * NERDTree  " opened with no file args
end

" Line numbers
Bundle 'myusuf3/numbers.vim'
" toggle absolute/relative line numbers
map <C-n> :call g:ToggleLineNumberMode()<CR>

" Python helpers
Bundle 'mattcaldwell/python-mode'
let g:pymode_folding = 0
let g:pymode_lint_ignore = "E125,E126,E127,E128,E201,E202,E225,E226,E227,E228,E231,E301,E302,E502"
let g:pymode_lint_maxlinelength = 119
" map <leader>j :RopeGotoDefinition<CR>

" Github commenting
Bundle 'mattcaldwell/vim-github-comment'
let g:github_user = "mattcaldwell"

" Surroundings
Bundle 'tpope/vim-surround'
" Django surround mappings
let b:surround_{char2nr("v")} = "{{ \r }}"
let b:surround_{char2nr("{")} = "{{ \r }}"
let b:surround_{char2nr("%")} = "{% \r %}"
let b:surround_{char2nr("b")} = "{% block \1block name: \1 %}\r{% endblock \1\1 %}"
let b:surround_{char2nr("i")} = "{% if \1condition: \1 %}\r{% endif %}"
let b:surround_{char2nr("w")} = "{% with \1with: \1 %}\r{% endwith %}"
let b:surround_{char2nr("f")} = "{% for \1for loop: \1 %}\r{% endfor %}"
let b:surround_{char2nr("c")} = "{% comment %}\r{% endcomment %}"

" Tagbar
" Bundle 'majutsushi/tagbar'
" map <C-t> :TagbarToggle<CR>

" Highlight trailing whitespace
Bundle 'bronson/vim-trailing-whitespace'

" Custom color scheme
Bundle 'twilight'
set t_Co=256

" Visual indentation guide
Bundle 'nathanaelkane/vim-indent-guides'
:let g:indent_guides_guide_size = 1
:let g:indent_guides_start_level = 2

" TextMate-like snippets
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
let g:UltiSnipsSnippetsDir='~/.vim/bundle/vim-snippets/'
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Command completion
Bundle 'davidhalter/jedi-vim'
" Bundle 'ervandew/supertab'
let g:jedi#use_splits_not_buffers = "top"
let g:jedi#goto_definitions_command = "<leader>j"

" HTML/XML tags
Bundle 'Valloric/MatchTagAlways'
" match html tags (MatchTagsAlways)
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml': 1,
    \ 'xml' : 1,
    \ 'htmldjango' : 1,
    \}

" Markdown support
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

" Git Signs
Bundle 'airblade/vim-gitgutter'

" Status bar
Bundle 'bling/vim-airline'

" Notes
" Bundle 'xolox/vim-misc'
" Bundle 'xolox/vim-notes'

" CSS Colors
" NOTE: Plugin is slow.
"Bundle 'skammer/vim-css-color'

" Time tracker
Bundle 'mattcaldwell/TimeKeeper'
let g:TimeKeeperUseFlatFile=0
let g:TimeKeeperUseGitNotes=1
let g:TimeKeeperUseGitProjectBranch=1
let g:TimeKeeperUseLocal=1
let g:TimeKeeperStartOnLoad=1
map <silent> <F8> :call TimeKeeper_ToggleTaskWindow()<cr>

" Tmux integration
Bundle 'jgdavey/tslime.vim'

" Emmet (HTML/CSS expansion ... and more?)
Bundle 'mattn/emmet-vim'

" Coffee script
Bundle 'kchmck/vim-coffee-script'

" Django templates
Bundle 'mjbrownie/vim-htmldjango_omnicomplete'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" end: vundle plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Install Vundle
if vundle_installed == 0
    echo "Installing Bundles, please ignore kep map error messages"
    echo ""
    :BundleInstall
endif

" Configure tmux integration
if !exists('g:tmux_command')
    let g:tmux_command = 'tmux'
endif

let g:tslime = {}
let g:tslime['session'] = substitute(system(g:tmux_command . " display-message -p '#S'"), "\n", "", "")
let g:tslime['window'] = 'editor'
let g:tslime['pane'] = '1'

" tslime mappings
"
" git
function! TMuxPaneUp()
    :call Send_to_Tmux("tmux select-pane -U\n")
endfunction

function! TMuxPaneDown()
    :call Send_to_Tmux("tmux select-pane -D\n")
endfunction

function! ExpandTMux()
    :call TMuxPaneDown()
    :call Send_to_Tmux("tmux resize-pane -U 20\n")
endfunction

function! CollapseTMux()
    :call Send_to_Tmux("tmux resize-pane -D 20\n")
endfunction

function! Send_to_Tmux_and_Expand(cmd)
    :call ExpandTMux()
    :call Send_to_Tmux(a:cmd)
endfunction

map <leader>gb :call Send_to_Tmux("git blame -L " . line(".") . "," . line(".") . " " . expand("%") . " \| fold -sw 180\n")<CR>
map <leader>gd :call Send_to_Tmux_and_Expand("git diff\n")<CR>
map <leader>gl :call Send_to_Tmux_and_Expand("git log\n")<CR>
map <leader>gs :call Send_to_Tmux("git status\n")<CR>
" window management
map <leader>+ :call ExpandTMux()<CR>
map <leader>- :call CollapseTMux()<CR>
" django


" Functions
function! g:ToggleLineNumberMode()
    if(&nu==1)
        set rnu
    elseif(&rnu==1)
        set nornu
    else
        set nu
    endif
endfunc

" Indent based on filetype
filetype plugin indent on

" Syntax highlighting and color scheme
syntax on
colorscheme twilight
highlight Pmenu ctermfg=0 ctermbg=2
highlight PmenuSel ctermfg=0 ctermbg=7

if has('autocmd')
    autocmd FileType python set expandtab tabstop=4 softtabstop=4 shiftwidth=4
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
endif
"set completeopt=menuone,longest,preview

" Basic editor settings
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set autoindent
set copyindent
set ignorecase
set smartcase
set smarttab
set nowrap
set cursorline
set backspace=indent,eol,start
set encoding=utf-8

set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak,*.pyc,*.class
set title
set visualbell
set noerrorbells

" Backups and swap files
silent !mkdir ~/tmp > /dev/null 2>&1
set backup
set swapfile
set backupdir=~/tmp
set dir=~/tmp

" HTML
if has('autocmd')
    autocmd FileType html set noexpandtab
    autocmd FileType htmldjango set noexpandtab
endif

" Javascript
autocmd FileType javascript set tabstop=3|set shiftwidth=3|set expandtab

" Ruby
autocmd FileType ruby set tabstop=2|set shiftwidth=2|set expandtab

" clear highlighting
map <C-g> :noh<CR>
" clear search
map <C-s> :let @/ = ""<CR>
" toggle list
map <C-l> :set list!<CR>
" window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

set laststatus=2

" search/replace
set hlsearch
set incsearch
map <leader>n :cn<CR>
map <leader>p :cp<CR>

" Whitespace
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
if has('autocmd')
    autocmd filetype html,xml set listchars-=tab:>.
endif

" Toggle paste mode
set pastetoggle=<F2>

" Forget to sudo?
cmap w!! w !sudo tee % >/dev/null
